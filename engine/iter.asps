#
# Asp application function specifications - iterators.
#

lib

# Iterator creation functions.
# The iter function creates a new iterator positioned on the first item of the
# given collection, if applicable. If the argument is already an iterator, a
# copy of it is returned. The current position is retained in the copy.
# The reversed function creates a reverse iterator positioned on the last item
# of the given collection. The reversed function does not accept an iterator.
# Note that the iter function will accept a reverse iterator, copying it as
# described above.
def iter(iterable) = AspLib_iter
def reversed(iterable) = AspLib_reversed

# Iterator dereference.
# Returns the referenced value without advancing the iterator.
def at(iterator, end = None) = AspLib_at

# Iterator advance.
# Returns the referenced value, advancing the iterator in the process.
def next(iterator, end = None) = AspLib_next

# Collection member removal using an iterator. The iterator must refer to a
# member of a mutable container (i.e., a list, set, or dictionary). Note that
# using an iterator at its end will cause an error.
# Returns the removed value and advances the iterator to the item following the
# removed item.
def del_at(iterator) = AspLib_del_at

# Access to the collection for a given iterator.
def iterable(iterator) = AspLib_iterable

# Note: Use conversion to bool to test an iterator. A value of False
# indicates an iterator at its end.
